let  没有变量提升  const 声明常量 可以修改引用数据类型不能修改简单数据类型
var 存在变量提升
变量：只会提升声明，不会提升赋值  
函数：只会提升声明，不会提升调用
先提升function 后提升var
同一作用域内，无法对同一个变量/常量进行重复声明。
var可以重复声明

块级作用域存在暂时性死区： 使用let和const命令声明变量之前，该变量都是不可用的，语法上被称为暂时性死区。

作用域链
函数执行时，现在内部找这个变量如果找不到向上层找直到找到全局作用域或者undefined
这就是作用域链

作用域
指一个变量的作用范围
在ES6之前，只有全局作用域和函数作用域，在ES6中，新增了块级作用域

结构赋值
数组：解构时不能用字符串，通过下标来结构
对象：按照属性来解构，可以更换属性名


模板字符串：
模板字符串是用反引号(`)标识，它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。

展开运算符（...）：
可以用作浅拷贝
将字符串转成数组
let arr='123'
const Arr=[...arr]//['1','2','3']
合并数组
const arr1=[1,2,3]
const arr2=[3,4,5]
const arr3=[...arr1,...arr2]
得arr[1,2,3,4,5,6]

函数默认形参要写在最后面否则数字和undefined相加得NAN
reset剩余参数在函数形参里写...arguments
数组的合并
    1.可以使用循环加push方法
    2.可以使用concat方法   语法  let [新数组] = [老数组].concat([另外的一个数组])



普通函数和箭头函数的区别：
外形不同: 箭头函数使用箭头定义，普通函数中没有
箭头函数全都是匿名函数: 普通函数可以有匿名函数，也可以有具名函数箭头函数不能用于构造函数: 普通函数可以用于构造函数，以此创建对象实例。箭头函数中 this 的指向不同: 在普通函数中，this 总是指向调用它的对象，如果用作构造函数，它指向创建的对象实例。
5、箭头函数不具有 arguments 对象: 每一个普通函数调用后都具有一个arguments 对象，用来存储实际传递的参数。但是箭头函数并没有此对象6、其他区别: 箭头函数不具有 prototype 原型对象。

Symbol：
它的值是唯一的,可以解决命名冲突问题,
它的值不能和其他数据一起运算,它定义的
对象不能使用for in循环遍历,但可以用
Reflect.ownkeys获得对象的所有键名

生成器：
它是根据遍历器进行封装,都有next函数,
每次调用会重新生成一个生成器函数


Promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled 和从 pending 变为 rejected 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved(已定型)。如果改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。

概念: promise函数是解决异步编程问题产生的,所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件(通常是个异步操作)的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 AP1，各种异步操作都可以用同样的方法进行处理

ajax的底层是根据什么封装的   （XMLHttpRequest）
promise函数底层是根据什么封装的    (XMLHttpRequest)
链式调用：
asyn awaiw 又叫链式调用的语法糖  asyn 是声明异步函数   awaiw 是将函数改编为同步请求
Promise.all同时发起请求时并发请求
入参是一个数组，函数调用，全部返回成功，才会返回成功，返回值是一个数组，一个请求报错，全部返回失败。语法：Promise.all([]).then((res) => {
    
})
rece:Promise.rece([]).then((res) => {
    
})

16.3 特点
1.对象的状态不受外界影响,有三种状态: pending (进行中)、 fulfilled (已成功)和 rejected (已失败)
2.一旦状态改变,就不会再变,任何时候都可以得到这个结果.
3.Promise 对象的状态改变，只有两种可能: 从 pending 变为 fulfilled 和从 pending 变为 rejected 。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，
这时就称为 resolved(已定型)。如果改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。


promise总结：
1.概念：是一个容器，里面包裹一步代码
2.状态：有三个状态：pendding进行中，fufilled成功，rejected失败
3.状态变化：从pending到fufilled是成功   从pending到rejected是失败
4.状态一经凝固，不会在变化
5.链式调用 =》和async,await
6.promise的then返回的是一个promise对象
7.方法有：promise.all()等待原则   promise.race()竞速赛跑   promise.finally()

axios封装：
axios是基于XMLHttprequest()封装的 promise也是基于XMLHttprequest()封装的   
axios是怎么创建链接的   是通过以下4点
1.创建对象，创建链接 XMLHttprequest()
2.确定请求方法
3.传递参数，发送请求
4.绑定事件处理响应结果  等于4表示成功建立请求链接   判断响应状态码200-299表示成功  否则失败
  5. 总结

   ES6新增了哪些特性

   ① let 和 const

   ② 箭头函数

   ③ 默认参数

   ④ 扩展运算符

   ⑤ 模板字符串

   ⑥ Promise

   ⑦ 迭代器和生成器

   ⑧ Map / Set / Symbol

   ⑨ class类

   ⑩ 解构赋值
1.Map对象
① 概念和出现的原因:JavaScript 的对象(Object) ，本质上是键值对的集合Hash 结构)，但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值(包括对象)都可以当作键。也就是说，Object 结构提供了“字符串一值”的对应，Map 结构提供了“值值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。
② map的方法使用
1.使用new Map()
2.判断长度: map.size
3.添加元素: map.setl
4.获取键值: map.get
5，判断当前对象存不存在该属性: map.has
6.删除当前对象中的属性: map.delete
7.清空该方法的所有成员: map.clear



2. set数组

   ① 概念: ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值.
   ② 本质: 是一个构造函数，
   ③ set的实例遍历操作
    · Set.prototype.keys() : 返回键名的遍历器
    · Set.prototype.valuesO) : 返回键值的遍历器
    · Set.prototype.entries(): 返回键值对的遍历器
    · Set.prototype.forEach() :使用回调函数遍历每个成员
   ④ 方法总结
    (1).获取元素的个数: array.size()
    (2).添加元素: array.add()
    (3).删除元素: array.delete()
    (4).检测是否存在这个值: array.has()
    (5).清空: array.clear()

3. class

   ​ ① ES6 提供了更接近传统语言的写法，引入了 Class(类)这个概念，作为对象的模板。通过 cLass 关键字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 lass 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的 cLass 改写，就是下面这样。

   ​ (1) 传统的es5的写法

   ​ function Point(x, y) {
   ​ this.x = x;
   ​ this.y = y;

   ​ }

   ​ Point.prototype.toString = function () {
   ​ return '('+ this.x + ',' + this.y + ')';

   ​ }

   ​ var p = new Point(1，2);

   ​ (2) 引入类以后class得写法

   ​ (3) class的set和get属性

   ​ (4) 类的static属性
   
   ​ 1.概念:类(class)通过 static 关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。这些通常是实用程序方法，例如创建或克隆对象的功能。
   
4. proxy

   ① 概念
    Proxy 对象用于创建一个对象的代理,从而实现基本操作的拦截和自定义 (如属性查找、赋值、枚举、函数调用等)

   ② 语法：

   ​ const p = new Proxy(target, handler)
   ​ (1) target
   ​ 要使用 Proxy 包装的目标对象 (可以是任何类型的对象，包括原生数组，函数，甚至另一个代理)

   ​ (2) handler
   ​ 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。

   ③  handler (en-US)
   包含捕捉器 (trap)的占位符对象，可译为处理器对象,
    (1) traps
    提供属性访问的方法。这类似于操作系统中捕获器的概念,
    (2) target
    被 Proxy 代理虚拟化的对象。它常被作为代理的存储后端。根据目标验证关于对象不可扩展性或不可配置属性的不变量(保持不变的语义)

   ⑪ 对象的方法 Object.assion

   ⑫ Incluide 数组方法：Array.from
、定义语法:
(1).局部指令:
new Vue({
directives:[指令名:配置对象}或
new Vue({directives{指令名:回调函数}
(2).全局指令:
Vue.directive(指令名配置对象) 或Vue.directive(指令名，回调函数)
配置对象中常用的3个回调:
(1).bind: 指令与元素成功绑定时调用。
(2)inserted指令所在元素被插入页面时调用。
(3).update: 指令所在模板结构被重新解析时调用
备注:
1.指令定义时不加v-，但使用时要加v-;
2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名.