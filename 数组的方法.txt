1.join()
 方法：join（'参数‘）把数组的元素以传入的参数未分隔符，转为字符串（不改变原数组) 语法：数组.join(以什么字符连接) 注意：（参数可以不写，不写的话就是以逗号链接）

2.push()
方法：该方法可以在数组的最后面，添加一个或多个元素，返回的值是修改过后数组的长度，（改变原数组）。语法：数组。push(要添加的数据)

3.split（）
方法：该方法是用指定的分隔符，将字符串分割成数组，返回值：返回一个新的数组（不改变原数组），split()
在编程中，数组是一种非常重要的数据结构，它用于存储相同类型的元素的有序集合。数组有许多方法，这些方法可以用于执行不同的任务，例如添加元素、删除元素、查找元素、修改元素等。以下是一些常见的数组方法及其返回值：

1.push(): 这个方法用于在数组的末尾添加一个或多个元素，并返回新的长度。例如，如果有一个数组arr，调用arr.push(element)将element添加到arr的末尾，并返回新的长度。
2.pop(): 这个方法用于删除并返回数组的最后一个元素。例如，如果有一个数组arr，调用arr.pop()将删除并返回arr的最后一个元素。
3.shift(): 这个方法用于删除并返回数组的第一个元素。例如，如果有一个数组arr，调用arr.shift()将删除并返回arr的第一个元素。
4.unshift(): 这个方法用于在数组的开头添加一个或多个元素，并返回新的长度。例如，如果有一个数组arr，调用arr.unshift(element)将element添加到arr的开头，并返回新的长度。
5.splice(): 这个方法用于添加/删除数组的元素。它接受两个参数：要开始更改数组的索引和要删除的元素数量。例如，如果有一个数组arr，调用arr.splice(index, numToDelete)将删除numToDelete个元素，并返回被删除的元素组成的数组。
5.slice(): 这个方法用于选取数组的一部分，返回一个新数组。它接受两个参数：开始和结束的索引（结束索引不包括在内）。例如，如果有一个数组arr，调用arr.slice(startIndex, endIndex)将返回一个新的数组，包含从startIndex开始到endIndex结束（不包括endIndex）的元素。
6.concat(): 这个方法用于合并两个或多个数组。它不会修改现有的数组，而是返回一个新的数组。例如，如果有两个数组arr1和arr2，调用arr1.concat(arr2)将返回一个新的数组，包含arr1和arr2的所有元素。
7.sort(): 这个方法用于对数组的元素进行排序。它接受一个可选的比较函数作为参数。如果没有提供比较函数，元素将按字符编码顺序进行排序。例如，如果有一个数组arr，调用arr.sort()将返回一个新的数组，包含排序后的元素。
8.reverse(): 这个方法用于反转数组的顺序。例如，如果有一个数组arr，调用arr.reverse()将返回一个新的数组，包含反转后的元素。
9.indexOf() / lastIndexOf(): 这两个方法用于查找数组中某个元素的索引。indexOf()从数组的开头开始查找，lastIndexOf()从数组的末尾开始查找。例如，如果有一个数组arr和一个元素element，调用arr.indexOf(element)将返回element在arr中的第一个索引，调用arr.lastIndexOf(element)将返回element在arr中的最后一个索引。如果没有找到元素，这两个方法将返回-1。
10.forEach()
方法：该方法用于调用数组的每个元素，并将元素传递给回调函数
语法：arr.forEach(function(数组的每一项，对应下标，当前数组){
//代码
}）
11.map()
方法：该方法将数组中的每个元素都让一个函数去处理，将处理后的每一个新的元素组成一个新数组并返回
语法：arr.map(function(v)){
//对V进行处理并返回处理后的每个v组成的数组
})
12.filter()
方法：该方法可以通过滤数组，让满足条件的所有元素组成一个新的数组并返回
语法：arr.filter(funtion(数组的每一项，对应下标，当前数组){
//筛选条件
})   或 arr.filter(item=>index>item)

13.reduce()
方法：该方法接受一个函数做为累加器，数组中的每个值（从左到右）开始缩减，最终计算未一个值，调用回调函数，回调函数中有两个参数，第一个参数是上一次操作的返回值，第二个参数是从第二个元素开始到最后一个元素。
语法：arr.reduce(function(pre,next){
//逻辑代码
})
14.some()
方法：该方法判断数组中是否有满足条件的元素，如果有满足条件的返回true否则返回false
语法：arr.some(function(数组的每一项，对应下标){
//逻辑代码
})
15.every（）
方法：该方法判断数组中是否所有元素都满足条件，
语法：arr.every(function(数组的每一项，对应下标){
//逻辑代码
})
16.find()
方法：查找数组中第一个满足指定条件的值，找到以后返回值，找不到返回undefind
17.findindex()
方法：查找数组中第一个满足指定条件的值的下标，找到以后下标值，找不到返回-1
语法：下标=数组.findindex(function(v,i,a){
return 条件
})
注意：在遍历数组时，判断每个元素是否满足条件，满足就返回这个元素的下标，没有满足条件返回-1
18.isArray 是一个判断变量是否为数组的函数，如果变量为数组返回 true，否则返回 false1。

isArray 的使用方法2：

判断是否为数组。
