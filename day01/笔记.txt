闭包的写法
 闭包的特点
1.函数嵌套函数
2.有返回值，返回值一定是一个函数
 函数嵌套函数，返回一个回调函数
防抖节流
语法：
防抖：function debounce(fn, delay = 200) {
            let time = 0
            return function () {
                if (time) {
                    //清除定时器，函数接着往下走
                    clearTimeout(timer)
                }
                timer = setTimeout(() => {

                    fn.//函数内改变this作用域
                        谁里面的this.apply(this, (若有参数需要传入用逗号隔开))
                    //外部调用函数,改变this作用域
                    谁里面的this.apply(this, (若有参数需要传入用逗号隔开))
                })
            }
        }
// 防抖 debounce
    /**
     * fn: 是你自己封装的搜索函数
     * delay: 延时调用时间, 你想延时调用多少秒,修改即可
    */
    function debounce (fn,delay=200) {
        let timer=0
        return function() {
            // 如果这个函数已经被触发了
            if(timer) {
                /*清楚定时器,函数接着往下走**/
                clearTimeout(timer)
            }
            timer=setTimeout(() => {
                fn.apply(this,arguments); // 透传 this和参数
                timer=0
            },delay)
        }
    }

    // 节流函数 throttle
    function throttle (fn,delay=200) {
        let timer=0
        return function() {
            if(timer) {
                /*直接返回,函数不会再运行**/
                return
            }
            timer=setTimeout(() => {
                fn.apply(this,arguments); // 透传 this和参数
                timer=0
            },delay)
        }
    }

事件循环，EventLoop
执行上下文
单线程:从上到下执行
事件: 同步事件，异步事件，执行顺序是 先执行同步任务，在执行异步任务
进栈
出栈
异步任务: 宏任务和微任务两种，先执行宏任务，在执行微任务
什么是: EventLoop
任务分为同步任务和异步任务两种，先执行同步任务，在执行异步任务但是异步任务又分为两种，宏任务和微任务，先执行微任务，再执行宏任务宏任务: setTimout,setInterval
微任务: .then .catch async await
同步任务: new Promise
同步任务:先进先出
异步任务: 取决于宏任务和微任务微任务:先进先出

在JavaScript中，"this"关键字的指向取决于函数被如何调用。

在非严格模式下，全局函数中的 "this" 指向全局对象（在浏览器中是 window）。
在对象的方法中的 "this" 指向该方法所属的对象。
在严格模式下，上述情况依然成立，但有两个例外：
函数作为对象的方法被调用时，"this" 指向调用该方法的对象。
通过 call、apply、bind 创建的函数，其 "this" 值是由调用方决定的

在JavaScript中，"this"的指向取决于函数被调用的方式。
在非严格模式下，"this"通常指向全局对象（在浏览器中，通常就是window）。
在严格模式下，"this"通常为undefined，除非以下几种情况：
作为函数调用，这时"this"会指向调用这个函数的上下文对象（context object）。
作为方法调用，这时"this"会指向调用这个方法的对象。
使用了.call()、.apply()、.bind()方法，这时"this"会指向调用这些方法的对象。
在构造函数中，"this"会指向新创建的对象。
总的来说，"this"的值取决于函数被调用的上下文，所以在不同的上下文中，"this"的值可能会有所不同。
